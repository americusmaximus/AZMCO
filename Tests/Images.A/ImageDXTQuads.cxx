/*
Copyright (c) 2025 Americus Maximus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

#include "ImageDXTQuads.hxx"

using namespace Images;

#define ACQUIRE_IMAGE_COLOR_QUAD_BASE_ADDRESS       (0x600104AB - 0x60000000)
#define ACQUIRE_IMAGE_COLOR_QUAD_FUNC_ADDRESS(M)    ((addr)M + (addr)ACQUIRE_IMAGE_COLOR_QUAD_BASE_ADDRESS)

#define ACQUIRE_IMAGE_PIXEL_QUAD_BASE_ADDRESS       (0x6000FFB3 - 0x60000000)
#define ACQUIRE_IMAGE_PIXEL_QUAD_FUNC_ADDRESS(M)    ((addr)M + (addr)ACQUIRE_IMAGE_PIXEL_QUAD_BASE_ADDRESS)

#define NORMALIZE_QUAD_BASE_ADDRESS                 (0x60010014 - 0x60000000)
#define NORMALIZE_QUAD_FUNC_ADDRESS(M)              ((addr)M + (addr)NORMALIZE_QUAD_BASE_ADDRESS)

// https://learn.microsoft.com/en-us/windows/win32/direct3d9/opaque-and-1-bit-alpha-textures

#define MAX_QUAD_COUNT                  10
#define MAX_QUAD_SEQUENCE_COUNT         16

typedef void (*ACQUIREIMAGECOLORQUADACTION)(const u16* pixels, ImageQuad* quad);

static const u16 QuadColorInputs[MAX_QUAD_COUNT][MAX_QUAD_SEQUENCE_COUNT] =
{
    { 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
    { 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
    { 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
    { 0xAAAA, 0xFFFF, 0xBBBB, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
    { 0x0000, 0xFFFF, 0xDDDD, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
    { 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
    { 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
    { 0xFFFF, 0x0000, 0xAAAA, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
    { 0xAAAA, 0x2222, 0x8888, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
    { 0xCDCD, 0x1818, 0x5678, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 }
};

static const ImageQuad QuadColorResults[MAX_QUAD_COUNT] =
{
    { 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000 },
    { 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000 },
    { 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000 },
    { 0x00000000, 0xFFD6AAA8, 0x00000000, 0xFFD6AAA8, 0x00000000, 0xFFD6AAA8, 0x00000000, 0xFFD6AAA8, 0xFFAD5552, 0xFFAD5552, 0xFFAD5552, 0xFFAD5552, 0xFFAD5552, 0xFFAD5552, 0xFFAD5552, 0xFFAD5552 },
    { 0xFFFFFFFF, 0x00000000, 0xFFFFFFFF, 0x00000000, 0xFFFFFFFF, 0x00000000, 0xFFFFFFFF, 0x00000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000 },
    { 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF },
    { 0xFF555555, 0xFF555555, 0xFF555555, 0xFF555555, 0xFF555555, 0xFF555555, 0xFF555555, 0xFF555555, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF },
    { 0xFFAAAAAA, 0xFFAAAAAA, 0xFFAAAAAA, 0xFFAAAAAA, 0xFFAAAAAA, 0xFFAAAAAA, 0xFFAAAAAA, 0xFFAAAAAA, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF },
    { 0xFFAD5552, 0xFF7E503C, 0xFFAD5552, 0xFF7E503C, 0xFFAD5552, 0xFF7E503C, 0xFFAD5552, 0xFF7E503C, 0xFFAD5552, 0xFFAD5552, 0xFFAD5552, 0xFFAD5552, 0xFFAD5552, 0xFFAD5552, 0xFFAD5552, 0xFFAD5552 },
    { 0xFFCEBA6B, 0xFF917C89, 0xFF553EA8, 0xFF1800C6, 0xFF917C89, 0xFF1800C6, 0xFF1800C6, 0xFF1800C6, 0xFFCEBA6B, 0xFFCEBA6B, 0xFFCEBA6B, 0xFFCEBA6B, 0xFFCEBA6B, 0xFFCEBA6B, 0xFFCEBA6B, 0xFFCEBA6B },
};

BOOL ExecuteAcquireImageColorQuad(HMODULE module, const u16* pixels, const ImageQuad* expect)
{
    ImageQuad o, m;
    ZeroMemory(&o, sizeof(ImageQuad));
    ZeroMemory(&m, sizeof(ImageQuad));

    ((ACQUIREIMAGECOLORQUADACTION)ACQUIRE_IMAGE_COLOR_QUAD_FUNC_ADDRESS(module))(pixels, &o);

    AcquireImageColorQuad(pixels, &m);

    return memcmp(&o, &m, sizeof(ImageQuad)) == 0 && memcmp(&o, expect, sizeof(ImageQuad)) == 0;
}

struct ImageQuadPixelTest
{
    ImageQuad   Quad;
    u16         Pixels[IMAGE_QUAD_PIXEL_COUNT];
    u16         Color;
};

#define MAX_IMAGE_PIXEL_QUAD_TEST_COUNT 7

static const ImageQuadPixelTest ImageQuadPixelTests[MAX_IMAGE_PIXEL_QUAD_TEST_COUNT] =
{
    {
        { 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000 },
        { 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000},
        0x0000
    },
    {
        { 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000 },
        { 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000},
        0xFFFF
    },
    {
        { 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000 },
        { 0x0000, 0x0000, 0x0F0C, 0x3330, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000},
        0xABCD
    },
    {
        { 0xFF555555, 0xFF555555, 0xFF555555, 0xFF555555, 0xFF555555, 0xFF555555, 0xFF555555, 0xFF555555, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF },
        { 0xFFFF, 0xFFFF, 0x3333, 0xC0C0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000},
        0x77AA
    },
    {
        { 0xFF555555, 0xFF555555, 0xFF555555, 0xFF555555, 0xFF555555, 0xFF555555, 0xFF555555, 0xFF555555, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF },
        { 0x52AA, 0x52AA, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000},
        0xFFFF
    },
    {
        { 0xFFAD5552, 0xFF7E503C, 0xFFAD5552, 0xFF7E503C, 0xFFAD5552, 0xFF7E503C, 0xFFAD5552, 0xFF7E503C, 0xFFAD5552, 0xFFAD5552, 0xFFAD5552, 0xFFAD5552, 0xFFAD5552, 0xFFAD5552, 0xFFAD5552, 0xFFAD5552 },
        { 0xAAAA, 0xAAAA, 0x0F0C, 0x3330, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000},
        0xABCD
    },
    {
        { 0xFFAD5552, 0xFF7E503C, 0xFFAD5552, 0xFF7E503C, 0xFFAD5552, 0xFF7E503C, 0xFFAD5552, 0xFF7E503C, 0xFFAD5552, 0xFFAD5552, 0xFFAD5552, 0xFFAD5552, 0xFFAD5552, 0xFFAD5552, 0xFFAD5552, 0xFFAD5552 },
        { 0xAAAA, 0xAAAA, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000},
        0xFFFF
    }
};

void AcquireImagePixelQuadWrapper(HMODULE m, const ImageQuad* quad, u16* pixels, u16 color)
{
    __asm
    {
        push edi;
        push esi;

        mov edi, quad;
        mov esi, pixels;

        movzx ecx, color;
        push ecx;

        mov ecx, m;
        add ecx, 0xFFB3; // ACQUIRE_IMAGE_PIXEL_QUAD_BASE_ADDRESS

        call ecx;

        pop esi; // color

        pop esi;
        pop edi;
    }

    return;
}

BOOL ExecuteAcquireImagePixelQuad(HMODULE module, const ImageQuadPixelTest* value)
{
    const u32 size = sizeof(u16) * IMAGE_QUAD_PIXEL_COUNT;

    u16 o[IMAGE_QUAD_PIXEL_COUNT];
    ZeroMemory(o, size);

    u16 m[IMAGE_QUAD_PIXEL_COUNT];
    ZeroMemory(m, size);

    AcquireImagePixelQuadWrapper(module, &value->Quad, o, value->Color);
    AcquireImagePixelQuad(&value->Quad, m, value->Color);

    return memcmp(o, m, size) == 0 && memcmp(o, value->Pixels, size) == 0;
}

typedef void(*IMAGEDXTNORMALIZEQUADACTION)(ImageQuad* quad, u16* pixels, const u32 color, const u32 alpha);

struct ImageDXTNormalizeQuadTest
{
    ImageQuad InQ;
    u16 InPixels[IMAGE_QUAD_PIXEL_COUNT];
    u32 Color, Alpha;

    ImageQuad OutQ;
    u16 OutPixels[IMAGE_QUAD_PIXEL_COUNT];
};

#define MAX_NORMALIZE_QUAD_TEST_COUNT   1

static const ImageDXTNormalizeQuadTest ImageDXTNormalizeQuadTests[MAX_NORMALIZE_QUAD_TEST_COUNT] =
{
    //{ {}, {},  0x00FFFFFF, 0xFF000000, {}, {} },
    //{
    //    { 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000 },
    //    { 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000},
    //    0x00FFFFFF, 0xFF000000,
    //    { 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000 },
    //    { 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000},
    //},
    //{
    //    { 0xFF2A450E, 0xFF91A181, 0xFF4C519E, 0xFF0B0E42, 0xFF222229, 0xFF000000, 0xFFADC7A3, 0xFF27660F, 0xFF3C6E62, 0xFF079170, 0xFFE36222, 0xFF73584B, 0xFFD4284F, 0xFF287BD4, 0xFF36D428, 0xFFA6D428 },
    //    { 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000},
    //    0x00FFFFFF, 0xFF000000,
    //    { 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000 },
    //    { 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000},
    //},
    {
        { 0xFFFFAAFF, 0xFFAAFFFF, 0xFFFFFFAA, 0xFF555555, 0xFF555555, 0xFF555555, 0xFF555555, 0xFF555555, 0xFF555555, 0xFF555555, 0xFF555555, 0xFF555555, 0xFF555555, 0xFF555555, 0xFF555555, 0xFF555555 },
        { 0x0011, 0x0555, 0x0AAA, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000},
        0x00FFFFFF, 0xFF000000,
        { 0xFFFFAAFF, 0xFFAAFFFF, 0xFFFFFFAA, 0xFF555555, 0xFF555555, 0xFF555555, 0xFF555555, 0xFF555555, 0xFF555555, 0xFF555555, 0xFF555555, 0xFF555555, 0xFF555555, 0xFF555555, 0xFF555555, 0xFF555555 },
        { 0xF7FD, 0x52AA, 0x5542, 0x5555, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000},
    },
};

BOOL ExecuteImageDXTNormalizeQuad(HMODULE module, const ImageDXTNormalizeQuadTest* test)
{
    IMAGEDXTNORMALIZEQUADACTION action =
        (IMAGEDXTNORMALIZEQUADACTION)NORMALIZE_QUAD_FUNC_ADDRESS(module);

    ImageQuad q1;
    CopyMemory(&q1, &test->InQ, sizeof(ImageQuad));

    u16 p1[IMAGE_QUAD_PIXEL_COUNT];
    CopyMemory(p1, &test->InPixels, sizeof(u16) * IMAGE_QUAD_PIXEL_COUNT);

    action(&q1, p1, test->Color, test->Alpha);

    ImageQuad q2;
    CopyMemory(&q2, &test->InQ, sizeof(ImageQuad));

    u16 p2[IMAGE_QUAD_PIXEL_COUNT];
    CopyMemory(p2, &test->InPixels, sizeof(u16) * IMAGE_QUAD_PIXEL_COUNT);

    ImageDXTNormalizeQuad(&q2, p2, test->Color, test->Alpha);

    bool res = memcmp(&q1, &q2, sizeof(ImageQuad)) == 0
        && memcmp(p1, p2, sizeof(u16) * IMAGE_QUAD_PIXEL_COUNT) == 0;

    if (!res)
    {
        int kk = 1;
    }

    return res;
}

BOOL ExecuteImageDXTQuads(HMODULE module)
{
    // Colors
    for (u32 x = 0; x < MAX_QUAD_COUNT; x++)
    {
        if (!ExecuteAcquireImageColorQuad(module, QuadColorInputs[x], &QuadColorResults[x])) { return FALSE; }
    }

    // Pixels
    for (u32 x = 0; x < MAX_IMAGE_PIXEL_QUAD_TEST_COUNT; x++)
    {
        if (!ExecuteAcquireImagePixelQuad(module, &ImageQuadPixelTests[x])) { return FALSE; }
    }

    // Normalize
    for (u32 x = 0; x < MAX_NORMALIZE_QUAD_TEST_COUNT; x++)
    {
        if (!ExecuteImageDXTNormalizeQuad(module, &ImageDXTNormalizeQuadTests[x])) { return FALSE; }
    }

    return TRUE;
}